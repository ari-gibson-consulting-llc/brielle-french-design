---
import Base from "../layouts/Base.astro";
import ServicesSection from "../components/ServicesSection.astro";
import { servicesPage as servicesPageUndefined } from "../lib/getContent";

type ServicesPage = Omit<typeof servicesPageUndefined, "sections"> & {
  sections: Array<NonNullable<(typeof servicesPageUndefined.sections)[0]>>;
};
const servicesPage = servicesPageUndefined as ServicesPage;

const sections: { [key: string]: string } = {};
servicesPage.sections.forEach((section) => {
  sections[section.slug] = section.nameOfService;
});

function standardizeServiceSection(service: (typeof servicesPage.sections)[0]) {
  return {
    title: service.nameOfService,
    slug: service.slug,
    description: service.descriptionOfService,
  };
}
---

<Base>
  <main class="base-main bg-#F2F2F2 lg:grid-cols-20 lg:grid">
    <div
      id="select-container"
      class="sticky top-0 mx-auto mb-8 w-3/4 lg:hidden"
    >
      <select
        id="pageSection"
        class="border-r-24 font-base mt-1.5 h-10 w-full rounded-md border-gray-300 border-r-transparent bg-gray-100 px-4 font-bold text-gray-700 sm:text-sm"
      >
        <option value={servicesPage.dropdownSlug}>{servicesPage.title}</option>
        {
          Object.entries(sections).map((section) => (
            <option value={section[0]}>{section[1]}</option>
          ))
        }
      </select>
    </div>

    <div
      id="sidebar"
      class="bg-#3DBFAF h-100vh sticky top-0 hidden w-full flex-col lg:col-start-1 lg:col-end-8 lg:row-start-1 lg:flex"
    >
      <div class="pt-42"></div>
      <a
        href={`#${servicesPage.dropdownSlug}`}
        class="font-base py-4 pl-6 text-2xl font-bold lowercase text-white/50 xl:pl-24"
      >
        {servicesPage.title}
      </a>
      {
        servicesPage.sections.map((service) => {
          const { slug, nameOfService } = service;
          return (
            <a
              href={`#${slug}`}
              class="font-base py-4 pl-6 text-2xl font-bold lowercase text-white/50 xl:pl-24"
            >
              {nameOfService}
            </a>
          );
        })
      }
    </div>

    <article
      id="content"
      class="lg:col-end-20 lg:[&>*:first-child]:scroll-m-512 mx-8 sm:mx-12 md:mx-20 lg:col-start-8 lg:row-start-1 lg:[&>*:first-child]:pt-16"
    >
      <ServicesSection
        title={servicesPage.title}
        slug={servicesPage.dropdownSlug}
        description={servicesPage.primaryText}
      />
      {
        servicesPage.sections.map((service) => (
          <ServicesSection {...standardizeServiceSection(service)} />
        ))
      }
    </article>
  </main>
</Base>

<script>
  /* Extends Element Objects with a function named scrollIntoViewPromise
   *  options: the normal scrollIntoView options without any changes
   */
  // @ts-ignore
  Element.prototype.scrollIntoViewPromise = function (options: any) {
    // "this" refers to the current element (el.scrollIntoViewPromise(options): this = el)
    this.scrollIntoView(options);

    // I create a variable that can be read inside the returned object ({ then: f() }) to expose the current element
    let parent = this;

    // I return an object with just a property inside called then
    // then contains a function which accept a function as parameter that will be execute when the scroll ends
    return {
      then: function (x: any) {
        // Check out https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API for more informations
        const intersectionObserver = new IntersectionObserver((entries) => {
          let [entry] = entries;

          // When the scroll ends (when our element is inside the screen)
          if (entry.isIntersecting) {
            // Execute the function into then parameter and stop observing the html element
            setTimeout(() => {
              x();
              intersectionObserver.unobserve(parent);
            }, 100);
          }
        });

        // I start to observe the element where I scrolled
        intersectionObserver.observe(parent);
      },
    };
  };

  let scrolling = false;
  let selectedElement: HTMLAnchorElement | null = null;

  const sectionSelector = document.querySelector(
    "#pageSection"
  ) as HTMLSelectElement;
  const selectContainer = document.querySelector(
    "#select-container"
  ) as HTMLDivElement;

  const remSize = parseInt(getComputedStyle(document.documentElement).fontSize);

  // sets smooth scrolling to each section when select value changes
  sectionSelector.addEventListener("change", async (e) => {
    const { target } = e;
    const section = (target as HTMLSelectElement).value;
    scrolling = true;
    // @ts-ignore
    await document.querySelector(`#${section}`)!.scrollIntoViewPromise({
      behavior: "smooth",
    });
    scrolling = false;
  });

  // detects which section is currently being displayed
  const sectionObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting && !scrolling) {
          sectionSelector.value = entry.target.id;
          const sidebarAnchor = document.querySelector(
            `#sidebar > a[href="#${entry.target.id}"]`
          ) as HTMLAnchorElement;
          sidebarAnchor.classList.remove("text-white/50");
          sidebarAnchor.classList.add("text-white");
          selectedElement?.classList.remove("text-white");
          selectedElement?.classList.add("text-white/50");

          selectedElement = sidebarAnchor;
        }
      });
    },
    {
      rootMargin: "0px",
      threshold: 1,
    }
  );

  // observe each section on page
  document
    .querySelectorAll("[data-service-section]")
    .forEach((section, i, arr) => {
      sectionObserver.observe(section);
    });

  // changes anchor tags to use smooth scrolling
  document.querySelectorAll("#sidebar a").forEach((anchor) => {
    anchor.addEventListener("click", (e) => {
      e.preventDefault();
      const { target } = e;
      const section = (target as HTMLAnchorElement).href.split("#")[1];
      scrolling = true;
      // @ts-ignore
      document.querySelector(`#${section}`)!.scrollIntoViewPromise({
        behavior: "smooth",
      });
      scrolling = false;
    });
  });
</script>
